<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yarel Maman&#39;s Blog</title>
    <link>https://yarelm.github.io/post/</link>
    <description>Recent content in Posts on Yarel Maman&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 22 Mar 2021 02:13:50 +0000</lastBuildDate><atom:link href="https://yarelm.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Heading Towards Cloud-Native Developer Environments [Part 1 ‚Äî The Why]</title>
      <link>https://yarelm.github.io/heading-towards-cloud-native-environments-1/</link>
      <pubDate>Mon, 22 Mar 2021 02:13:50 +0000</pubDate>
      
      <guid>https://yarelm.github.io/heading-towards-cloud-native-environments-1/</guid>
      <description>In many cloud-based software development projects, a CI/CD process is designed and maintained for deploying applications in an efficient, safe, and productive manner to cloud environments.
The main focus around the CI/CD process is often on the cloud/remote side, but seldom we talk about the phase that comes right before CI/CD, which is the local development and testing done on the developer‚Äôs laptop.
In this article, I‚Äôll show why many common methods for local development are far from ideal, and I‚Äôll present a demo for an alternate, cloud-native approach which will improve your (or your developers‚Äô) productivity.</description>
    </item>
    
    <item>
      <title>Heading Towards Cloud-Native Developer Environments [Part 2 ‚Äî The How]</title>
      <link>https://yarelm.github.io/heading-towards-cloud-native-environments-2/</link>
      <pubDate>Mon, 22 Mar 2021 02:13:50 +0000</pubDate>
      
      <guid>https://yarelm.github.io/heading-towards-cloud-native-environments-2/</guid>
      <description>Heading Towards Cloud-Native Developer Environments [Part 2 ‚Äî The How] Alright! If you&amp;rsquo;re here it probably means you have read Part 1 (The Why), and you want to know more about how to properly set up cloud-native developer environments. Great!
Let‚Äôs follow an example of an existing project team and how can we improve their development workflow.
 This guide was written with GCP (Google Cloud Platform) in mind, but the same concepts can be applied to AWS as well.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yarelm.github.io/ebpf-cilium-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yarelm.github.io/ebpf-cilium-2/</guid>
      <description>eBPF, Cilium, Dataplane V2 and All That Buzz (Part 2) I hope you enjoyed reading about eBPF in Part 1! Now let‚Äôs examine Cilium as a popular K8s eBPF solution and find out how it relates to Dataplane V2.
Cilium üêù is a ‚Äúhot‚Äù technology that‚Äôs powered by eBPF. It‚Äôs often the first thing mentioned when eBPF comes up, more so in the context of K8s. Cilium is basically open-source software that acts as a CNI plugin for Kubernetes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yarelm.github.io/ebpf-cilium/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yarelm.github.io/ebpf-cilium/</guid>
      <description>eBPF, Cilium, Dataplane V2 and All That Buzz (Part 1) If you‚Äôre following the latest cloud computing trends, you‚Äôve probably come across the eBPF term quite a lot. It‚Äôs hard not to notice it. Let‚Äôs learn why.
Looking for a modern security, observability, and monitoring solution, while maintaining optimal performance? eBPF might be the answer! This article will dive into why this Linux Kernel feature has become one of the top buzzwords for the cloud-native stack.</description>
    </item>
    
  </channel>
</rss>
